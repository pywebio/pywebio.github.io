"use strict";(self.webpackChunkpy_web_io_blog=self.webpackChunkpy_web_io_blog||[]).push([[717],{4168:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"docusaurus-cms","metadata":{"permalink":"/docs/blog/docusaurus-cms","source":"@site/blog/2022-04-08-docusaurus-cms/index.mdx","title":"Use Docusaurus and GitHub Actions as a CMS","description":"A guide to setting up Docusaurus and GitHub Actions as a content management system to an existing GitHub Pages website","date":"2022-04-08T00:00:00.000Z","formattedDate":"April 8, 2022","tags":[{"label":"PyWeb.io","permalink":"/docs/blog/tags/py-web-io"},{"label":"Docusaurus","permalink":"/docs/blog/tags/docusaurus"},{"label":"CMS","permalink":"/docs/blog/tags/cms"},{"label":"GitHub Actions","permalink":"/docs/blog/tags/git-hub-actions"}],"readingTime":3.955,"truncated":true,"authors":[{"name":"Hannah Young","title":"Software Developer","url":"https://github.com/Corgibyte","imageURL":"https://github.com/Corgibyte.png","key":"young"},{"name":"Jeff Terrell","title":"Generalist","url":"https://github.com/JeffTerrell","imageURL":"https://github.com/JeffTerrell.png","key":"terrell"}],"frontMatter":{"slug":"docusaurus-cms","title":"Use Docusaurus and GitHub Actions as a CMS","description":"A guide to setting up Docusaurus and GitHub Actions as a content management system to an existing GitHub Pages website","image":"/img/blog/docusaurus_gh_cms.png","authors":["young","terrell"],"tags":["PyWeb.io","Docusaurus","CMS","GitHub Actions"],"keywords":["Docusaurus","GitHub Actions","CMS"]}},"content":"![Docusaurus CMS](./docusaurus_gh_cms.png)\\n\\n\\n## Problem \u2753\\n![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/cloudy.png)\\n\\nAdding a Docusaurus powered blog and tutorial section to the existing PyWeb.io website hosted on GitHub Pages. Docusaurus has excellent documentation on deploying to GitHub Pages. However, with a pre-existing deployed GitHub pages website, there is a need to add the Docusaurus generated static files to this deployment without disrupting the existing structure.\\n\\n## Solution \u2714\ufe0f\\n![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/cloudy.png)\\n\\nThe solution was to use Docusaurus to transform Markdown content files into static HTML files, and GitHub Actions to automatically build those files and deploy them from the Docusaurus repository to the pre-existing GitHub Pages repository.\\n\\n\x3c!--truncate--\x3e\\n\\n## Requirements \ud83d\udcdd\\n![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/cloudy.png)\\n\\n1. A [Docusaurus](https://docusaurus.io/) source code repository (documentation repo).\\n    * Follow [Docusaurus\' instructions](https://docusaurus.io/docs) for setting up a project.\\n    * Push this Docusaurus project to your documentation repository on [GitHub](https://github.com/).\\n2. A GitHub repository with a branch setup for [GitHub Pages](https://pages.github.com/) (GH Pages repo).\\n\\n## Setup SSH Key \ud83d\udddd\ufe0f\\n![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/cloudy.png)\\n\\n1. Generate a new SSH key using [GitHub\'s instructions](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent). \\n:::danger Warning\\nDo **not** add a passphrase. There is no need to add the key to your ssh-agent\\n:::\\n\\n2. Go to your GH Pages repo on GitHub\'s website. Select the `Settings` tab. Then select `Deploy keys` from the sidebar on the left. \\n3. Select `Add deploy key`. Add a title for the deploy key, and then paste the contents of the **public** SSH key (file ending with `.pub`) into the `Key` field. \\n4. Be sure to select `Allow write access` and then select `Add key`.\\n5. Go to your documentation repo on GitHub\'s website. Select the `Settings` tab. In the sidebar to the left select `Secrets`, followed by `Actions`.\\n6. Select `New repository secret`. Select an [appropriate name](https://docs.github.com/en/actions/security-guides/encrypted-secrets#naming-your-secrets) for your secret. \\n7. Paste the contents of the **private**  SSH key file (should begin with `-----BEGIN OPENSSH PRIVATE KEY-----`) into the `Value` field, and then select `Add secret`.\\n:::note\\nThe **public** SSH key belongs in the GH Pages repo and the **private** SSH key belongs in your documentation (Docusaurus) repo\\n:::\\n\\n## Setup GitHub Actions Workflow \u25b6\ufe0f\\n![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/cloudy.png)\\n\\n1. From the root of your documentation repo create a [workflow file](https://docs.github.com/en/actions/using-workflows#creating-a-workflow-file) with the following folder structure:\\n    * `.github/workflows/yourfile.yml`.\\n\\n    :::note\\n\\n    The filename can be of your choosing, example: `deploy.yml`.\\n\\n    :::\\n\\n2. The workflow file has two triggers, either a pull request or push to the `main` branch of the documentation repo.\\n\\n```\\nname: Deploy to GitHub Pages\\non:\\n  pull_request:\\n    branches: [main]\\n  push:\\n    branches: [main]\\n```\\n\\n3. The first job will run when there is a pull request to `main` and will checkout the source, install NPM, and then generate static files from the documentation source to ensure there are no build errors.\\n\\n```\\njobs:\\n  test-deploy:\\n    if: github.event_name != \'push\'\\n    runs-on: ubuntu-latest\\n    steps:\\n      - uses: actions/checkout@v3\\n      - uses: actions/setup-node@v3\\n        with:\\n          node-version: 16.x\\n          cache: npm\\n      - name: Install dependencies\\n        run: npm ci\\n      - name: Test build website\\n        run: npm run build\\n```\\n\\n4. The second job will run when there is a push to `main`. It will also checkout the source, install NPM, and generate static files. It will then deploy those static files to the pre-existing GH Pages repo.\\n\\n```\\ndeploy:\\n    if: github.event_name != \'pull_request\'\\n    runs-on: ubuntu-latest\\n    steps:\\n      - uses: actions/checkout@v3\\n      - uses: actions/setup-node@v3\\n        with:\\n          node-version: 16.x\\n          cache: npm\\n      - name: Install dependencies and build\\n        run: npm ci\\n      - name: Test build website\\n        run: npm run build\\n      - name: Deploy to GitHub Pages\\n        uses: peaceiris/actions-gh-pages@v3\\n        with:\\n          deploy_key: ${{ secrets.GH_PAGES_DEPLOY }}    # Be sure to select the name used for your secret\\n          external_repository: pywebio/pywebio.github.io    # GH Pages repo\\n          publish_dir: ./build\\n          publish_branch: main    # Branch in GH Pages repo set to be Source for GitHub Pages\\n          destination_dir: docs   # Directory to indicate path for your documentation from base URL. Ours will be pyweb.io/docs\\n          user_name: \'github-actions[bot]\'\\n          user_email: \'github-actions[bot]@users.noreply.github.com\'\\n```\\n\\n:::note\\n\\nTake note of the comments on important values. Full script visible [here](https://gist.github.com/Corgibyte/9da8da9cf61b788c57a5ab23a92245cb)\\n\\n:::\\n\\n## Setup Docusaurus Configuration \u2699\ufe0f\\n![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/cloudy.png)\\n\\nBecause the documentation static files are nested in a path of the rest of the existing static webpage, it is important to update the `docusaurus.config.js` file in the documentation source. Change the `baseUrl` field to match the `destination_dir` selected in the workflow file\'s `actions-gh-pages@v3` step. For example: `/docs/`.\\n\\n```\\nconst config = {\\n  title: \'PyWebIO\',\\n  tagline: \'Low code Python web framework\',\\n  url: \'https://pyweb.io\',\\n  baseUrl: \'/docs/\',\\n  onBrokenLinks: \'throw\',\\n  onBrokenMarkdownLinks: \'warn\',\\n  favicon: \'img/favicon.ico\',\\n  organizationName: \'pywebio\', // Usually your GitHub org/user name.\\n  projectName: \'content_creation\', // Usually your repo name.\\n  deploymentBranch: \'gh-pages\',\\n  trailingSlash: true,\\n```\\n\\n## Conclusion \ud83d\udc4b\\n![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/cloudy.png)\\n\\nYou should now be able to create content files for Docusaurus and have them auto-deploy once they are merged with your documentation source repository\'s `main` branch.\\nCheck out how PyWeb.io is using this set up for creating blog and tutorial content:\\n* [Compose and Publish Blog Post](/contribute/blog-post)\\n* [Compose and Publish Tutorial](/contribute/tutorial)"}]}')}}]);